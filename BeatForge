<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FretFlow with BeatForge</title>
    <style>
    body {
        font-family: Arial, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
    }

    h1, h2 {
        text-align: center;
        color: #333;
    }

    .fretboards-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .fretboard-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .controls {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    select {
        padding: 5px;
        margin: 0 10px;
        border-radius: 5px;
        border: 1px solid #ddd;
    }

    .fretboard {
        position: relative;
        height: 200px;
        background: #d4a373;
        border-radius: 5px;
        margin-bottom: 30px;
        border: 2px solid #8b5e34;
        overflow: visible;
    }

    .fret-line {
        position: absolute;
        top: 0;
        height: 100%;
        width: 2px;
        background: #c0c0c0;
        border-right: 1px solid rgba(0, 0, 0, 0.3);
        z-index: 1;
    }

    .string-line {
        position: absolute;
        left: 0;
        width: 100%;
        height: 1px;
        background: #silver;
        border-bottom: 1px solid rgba(0, 0, 0, 0.3);
        z-index: 0;
    }

    .fret-number {
        position: absolute;
        bottom: -25px;
        font-size: 14px;
        color: #333;
        transform: translateX(-50%);
        font-weight: bold;
        z-index: 2;
        width: 20px;
        text-align: center;
    }

    .note {
        position: absolute;
        width: 25px;
        height: 25px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        color: white;
        z-index: 3;
        cursor: pointer;
        transform: translate(-50%, -50%);
    }

    .tonic {
        background-color: #f44336 !important;
    }

    .metronome-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-top: 30px;
    }

    .beats-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin: 20px 0;
    }

    .beat {
        width: 50px;
        height: 80px;
        background: #9E9E9E;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        color: white;
        font-weight: bold;
        transition: all 0.2s ease;
        position: relative;
    }

    .beat.active {
        transform: translateY(-10px);
    }

    .beat::before {
        content: 'â™ª';
        font-size: 24px;
        margin-bottom: 5px;
    }

    .beat[data-volume="1"] {
        background: #2196F3;
    }

    .beat[data-volume="0.5"] {
        background: #4CAF50;
    }

    .beat[data-volume="0"] {
        background: #9E9E9E;
    }

    .controls-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin: 20px 0;
    }

    button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        background: #4CAF50;
        color: white;
        cursor: pointer;
        font-weight: bold;
    }

    button:hover {
        background: #45a049;
    }

    input[type="range"] {
        width: 200px;
    }
    </style>
</head>
<body>
    <h1>FretFlow</h1>

    <div class="fretboards-grid">
        <!-- Fretboard 1 -->
        <div class="fretboard-container">
            <div class="controls">
                <select id="key-1">
                    <option value="A">A</option>
                    <option value="A#">A#</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="C#">C#</option>
                    <option value="D">D</option>
                    <option value="D#">D#</option>
                    <option value="E">E</option>
                    <option value="F">F</option>
                    <option value="F#">F#</option>
                    <option value="G">G</option>
                    <option value="G#">G#</option>
                </select>
                <select id="scale-1">
                    <option value="major">Major</option>
                    <option value="minor">Minor</option>
                    <option value="harmonicMinor">Harmonic Minor</option>
                    <option value="melodicMinor">Melodic Minor</option>
                    <option value="pentatonicMajor">Pentatonic Major</option>
                    <option value="pentatonicMinor">Pentatonic Minor</option>
                    <option value="blues">Blues</option>
                    <option value="dorian">Dorian</option>
                    <option value="phrygian">Phrygian</option>
                    <option value="lydian">Lydian</option>
                    <option value="mixolydian">Mixolydian</option>
                    <option value="locrian">Locrian</option>
                    <option value="bebop">Bebop</option>
                    <option value="diminished">Diminished</option>
                </select>
            </div>
            <div id="fretboard-1" class="fretboard"></div>
        </div>

        <!-- Fretboard 2 -->
        <div class="fretboard-container">
            <div class="controls">
                <select id="key-2">
                    <option value="A">A</option>
                    <option value="A#">A#</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="C#">C#</option>
                    <option value="D">D</option>
                    <option value="D#">D#</option>
                    <option value="E">E</option>
                    <option value="F">F</option>
                    <option value="F#">F#</option>
                    <option value="G">G</option>
                    <option value="G#">G#</option>
                </select>
                <select id="scale-2">
                    <option value="major">Major</option>
                    <option value="minor">Minor</option>
                    <option value="harmonicMinor">Harmonic Minor</option>
                    <option value="melodicMinor">Melodic Minor</option>
                    <option value="pentatonicMajor">Pentatonic Major</option>
                    <option value="pentatonicMinor">Pentatonic Minor</option>
                    <option value="blues">Blues</option>
                    <option value="dorian">Dorian</option>
                    <option value="phrygian">Phrygian</option>
                    <option value="lydian">Lydian</option>
                    <option value="mixolydian">Mixolydian</option>
                    <option value="locrian">Locrian</option>
                    <option value="bebop">Bebop</option>
                    <option value="diminished">Diminished</option>
                </select>
            </div>
            <div id="fretboard-2" class="fretboard"></div>
        </div>

        <!-- Fretboard 3 -->
        <div class="fretboard-container">
            <div class="controls">
                <select id="key-3">
                    <option value="A">A</option>
                    <option value="A#">A#</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="C#">C#</option>
                    <option value="D">D</option>
                    <option value="D#">D#</option>
                    <option value="E">E</option>
                    <option value="F">F</option>
                    <option value="F#">F#</option>
                    <option value="G">G</option>
                    <option value="G#">G#</option>
                </select>
                <select id="scale-3">
                    <option value="major">Major</option>
                    <option value="minor">Minor</option>
                    <option value="harmonicMinor">Harmonic Minor</option>
                    <option value="melodicMinor">Melodic Minor</option>
                    <option value="pentatonicMajor">Pentatonic Major</option>
                    <option value="pentatonicMinor">Pentatonic Minor</option>
                    <option value="blues">Blues</option>
                    <option value="dorian">Dorian</option>
                    <option value="phrygian">Phrygian</option>
                    <option value="lydian">Lydian</option>
                    <option value="mixolydian">Mixolydian</option>
                    <option value="locrian">Locrian</option>
                    <option value="bebop">Bebop</option>
                    <option value="diminished">Diminished</option>
                </select>
            </div>
            <div id="fretboard-3" class="fretboard"></div>
        </div>

        <!-- Fretboard 4 -->
        <div class="fretboard-container">
            <div class="controls">
                <select id="key-4">
                    <option value="A">A</option>
                    <option value="A#">A#</option>
                    <option value="B">B</option>
                    <option value="C">C</option>
                    <option value="C#">C#</option>
                    <option value="D">D</option>
                    <option value="D#">D#</option>
                    <option value="E">E</option>
                    <option value="F">F</option>
                    <option value="F#">F#</option>
                    <option value="G">G</option>
                    <option value="G#">G#</option>
                </select>
                <select id="scale-4">
                    <option value="major">Major</option>
                    <option value="minor">Minor</option>
                    <option value="harmonicMinor">Harmonic Minor</option>
                    <option value="melodicMinor">Melodic Minor</option>
                    <option value="pentatonicMajor">Pentatonic Major</option>
                    <option value="pentatonicMinor">Pentatonic Minor</option>
                    <option value="blues">Blues</option>
                    <option value="dorian">Dorian</option>
                    <option value="phrygian">Phrygian</option>
                    <option value="lydian">Lydian</option>
                    <option value="mixolydian">Mixolydian</option>
                    <option value="locrian">Locrian</option>
                    <option value="bebop">Bebop</option>
                    <option value="diminished">Diminished</option>
                </select>
            </div>
            <div id="fretboard-4" class="fretboard"></div>
        </div>
    </div>

    <h2>BeatForge</h2>
    <div class="metronome-container">
        <div class="controls-container">
            <select id="time-signature">
                <option value="2">2/4</option>
                <option value="3">3/4</option>
                <option value="4" selected>4/4</option>
                <option value="6">6/8</option>
                <option value="8">8/8</option>
            </select>
            <select id="target-tone">
                <option value="440">A (440Hz)</option>
                <option value="493.88">B (494Hz)</option>
                <option value="523.25">C (523Hz)</option>
                <option value="587.33">D (587Hz)</option>
                <option value="659.25">E (659Hz)</option>
                <option value="698.46">F (698Hz)</option>
                <option value="783.99">G (784Hz)</option>
            </select>
        </div>
        <div class="beats-container">
            <div class="beat" data-beat="1" data-volume="0">1</div>
            <div class="beat" data-beat="2" data-volume="0">2</div>
            <div class="beat" data-beat="3" data-volume="0">3</div>
            <div class="beat" data-beat="4" data-volume="0">4</div>
            <div class="beat" data-beat="5" data-volume="0">5</div>
            <div class="beat" data-beat="6" data-volume="0">6</div>
            <div class="beat" data-beat="7" data-volume="0">7</div>
            <div class="beat" data-beat="8" data-volume="0">8</div>
        </div>
        <div class="controls-container">
            <button id="start-stop">Start</button>
            <button id="tap-tempo">Tap Tempo</button>
            <input type="range" id="tempo" min="40" max="220" value="120">
            <span id="tempo-display">120 BPM</span>
            <button id="reset-targets">Reset Targets</button>
        </div>
    </div>

    <script>
    // Musical constants and utilities
    const NOTES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
    const SCALES = {
        major: [0, 2, 4, 5, 7, 9, 11],
        minor: [0, 2, 3, 5, 7, 8, 10],
        harmonicMinor: [0, 2, 3, 5, 7, 8, 11],
        melodicMinor: [0, 2, 3, 5, 7, 9, 11],
        pentatonicMajor: [0, 2, 4, 7, 9],
        pentatonicMinor: [0, 3, 5, 7, 10],
        blues: [0, 3, 5, 6, 7, 10],
        dorian: [0, 2, 3, 5, 7, 9, 10],
        phrygian: [0, 1, 3, 5, 7, 8, 10],
        lydian: [0, 2, 4, 6, 7, 9, 11],
        mixolydian: [0, 2, 4, 5, 7, 9, 10],
        locrian: [0, 1, 3, 5, 6, 8, 10],
        bebop: [0, 2, 4, 5, 7, 9, 10, 11],
        diminished: [0, 2, 3, 5, 6, 8, 9, 11]
    };

    let currentTuning = ['E', 'B', 'G', 'D', 'A', 'E'];

    function getNote(startNote, semitones) {
        const startIndex = NOTES.indexOf(startNote);
        const newIndex = (startIndex + semitones) % 12;
        return NOTES[newIndex];
    }

    function updateFretboard(index) {
        const selectedKey = document.getElementById(`key-${index}`).value;
        const selectedScale = document.getElementById(`scale-${index}`).value;
        const fretboard = document.getElementById(`fretboard-${index}`);

        fretboard.innerHTML = '';

        // Create fret lines and numbers
        for (let i = 0; i <= 12; i++) {
            const fretLine = document.createElement('div');
            fretLine.className = 'fret-line';
            fretLine.style.left = `${(i / 12) * 100}%`;
            fretboard.appendChild(fretLine);

            if ([3, 5, 7, 9, 12].includes(i)) {
                const fretNumber = document.createElement('div');
                fretNumber.className = 'fret-number';
                fretNumber.textContent = i;
                fretNumber.style.left = `${(i / 12) * 100}%`;
                fretboard.appendChild(fretNumber);
            }
        }

        // Create strings
        for (let i = 0; i < 6; i++) {
            const stringLine = document.createElement('div');
            stringLine.className = 'string-line';
            stringLine.style.top = `${(i / 5) * 100}%`;
            fretboard.appendChild(stringLine);
        }

        // Add notes with updated color logic
        const scaleIntervals = SCALES[selectedScale];
        const scaleNotes = scaleIntervals.map(interval => getNote(selectedKey, interval));

        function isImportantDegree(noteIndex, scale) {
            const degree = scaleIntervals.indexOf(noteIndex);

            switch(scale) {
                case 'minor':
                case 'harmonicMinor':
                case 'melodicMinor':
                case 'pentatonicMinor':
                    return degree === 0 ||
                           noteIndex === 3 ||
                           noteIndex === 7 ||
                           noteIndex === 10 || noteIndex === 11;
                case 'mixolydian':
                case 'bebop':
                    return degree === 0 ||
                           noteIndex === 4 ||
                           noteIndex === 7 ||
                           noteIndex === 10;
                default:
                    return degree === 0 ||
                           noteIndex === 4 ||
                           noteIndex === 7 ||
                           noteIndex === 11;
            }
        }

        for (let string = 0; string < 6; string++) {
            const openNote = currentTuning[string];
            for (let fret = 0; fret <= 12; fret++) {
                const currentNote = getNote(openNote, fret);
                if (scaleNotes.includes(currentNote)) {
                    const note = document.createElement('div');
                    const noteIndex = scaleIntervals[scaleNotes.indexOf(currentNote)];
                    let className = 'note';

                    if (currentNote === selectedKey) {
                        className += ' tonic';
                        note.style.backgroundColor = '#f44336';
                    } else if (isImportantDegree(noteIndex, selectedScale)) {
                        note.style.backgroundColor = '#2E7D32';
                    } else {
                        note.style.backgroundColor = '#4CAF50';
                    }

                    note.className = className;
                    note.textContent = currentNote;
                    note.style.left = `${((fret / 12) * 100)}%`;
                    note.style.top = `${((string / 5) * 100)}%`;
                    fretboard.appendChild(note);
                }
            }
        }
    }

    // Initialize fretboards
    for (let i = 1; i <= 4; i++) {
        updateFretboard(i);
        document.getElementById(`key-${i}`).addEventListener('change', () => updateFretboard(i));
        document.getElementById(`scale-${i}`).addEventListener('change', () => updateFretboard(i));
    }

    // BeatForge Metronome functionality
    let isPlaying = false;
    let tempo = 120;
    let currentBeat = 0;
    let intervalId = null;
    let audioContext = null;
    const beats = document.querySelectorAll('.beat');

    beats.forEach(beat => {
        beat.addEventListener('click', function() {
            const currentVolume = parseFloat(this.dataset.volume) || 0;
            let newVolume;

            if (currentVolume === 0) {
                newVolume = 1;  // First click - full volume
                this.style.backgroundColor = '#2196F3';  // Blue
            } else if (currentVolume === 1) {
                newVolume = 0.25;  // Second click - quarter volume
                this.style.backgroundColor = '#4CAF50';  // Green
            } else {
                newVolume = 0;  // Third click - no sound
                this.style.backgroundColor = '#9E9E9E';  // Gray
            }

            this.dataset.volume = newVolume;
        });
    });

    function playSound(isTarget = false, volume = 1) {
        if (!audioContext || volume === 0) return;

        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);

        const targetTone = parseFloat(document.getElementById('target-tone').value);
        oscillator.type = isTarget ? 'triangle' : 'sine';
        oscillator.frequency.setValueAtTime(isTarget ? targetTone : 440, audioContext.currentTime);

        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.5 * volume, audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);

        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.1);
    }

    function startMetronome() {
        isPlaying = true;
        const interval = (60 / tempo) * 1000;
        const timeSignature = parseInt(document.getElementById('time-signature').value);

        function playBeat() {
            beats.forEach(beat => beat.classList.remove('active'));
            const currentBeatElement = beats[currentBeat];
            currentBeatElement.classList.add('active');

            const volume = parseFloat(currentBeatElement.dataset.volume) || 0;
            playSound(volume > 0, volume);

            currentBeat = (currentBeat + 1) % timeSignature;
        }

        if (intervalId) {
            clearInterval(intervalId);
        }

        playBeat();
        intervalId = setInterval(playBeat, interval);

        beats.forEach((beat, index) => {
            beat.style.display = index < timeSignature ? 'flex' : 'none';
        });
    }

    function stopMetronome() {
        isPlaying = false;
        if (intervalId) {
            clearInterval(intervalId);
            intervalId = null;
        }
        currentBeat = 0;
        beats.forEach(beat => beat.classList.remove('active'));
    }

    document.getElementById('start-stop').addEventListener('click', function() {
        if (!audioContext) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }

        if (isPlaying) {
            stopMetronome();
            this.textContent = 'Start';
        } else {
            startMetronome();
            this.textContent = 'Stop';
        }
    });

    document.getElementById('tempo').addEventListener('input', function() {
        tempo = parseInt(this.value);
        document.getElementById('tempo-display').textContent = `${tempo} BPM`;
        if (isPlaying) {
            stopMetronome();
            startMetronome();
        }
    });

    document.getElementById('reset-targets').addEventListener('click', function() {
        beats.forEach(beat => {
            beat.dataset.volume = "0";
            beat.style.backgroundColor = '#9E9E9E';
        });
    });

    document.getElementById('time-signature').addEventListener('change', function() {
        const timeSignature = parseInt(this.value);
        currentBeat = 0;
        beats.forEach((beat, index) => {
            beat.style.display = index < timeSignature ? 'flex' : 'none';
            beat.classList.remove('active');
        });

        if (isPlaying) {
            stopMetronome();
            startMetronome();
        }
    });

    // Tap Tempo functionality
    let tapTimes = [];
    let lastTapTime = 0;

    document.getElementById('tap-tempo').addEventListener('click', function() {
        const currentTime = Date.now();

        if (currentTime - lastTapTime > 2000) {
            tapTimes = [];
        }

        tapTimes.push(currentTime);
        lastTapTime = currentTime;

        if (tapTimes.length > 4) {
            tapTimes.shift();
        }

        if (tapTimes.length > 1) {
            const intervals = [];
            for (let i = 1; i < tapTimes.length; i++) {
                intervals.push(tapTimes[i] - tapTimes[i-1]);
            }

            const averageInterval = intervals.reduce((a, b) => a + b) / intervals.length;
            tempo = Math.round(60000 / averageInterval);
            tempo = Math.min(Math.max(tempo, 40), 220);

            document.getElementById('tempo').value = tempo;
            document.getElementById('tempo-display').textContent = `${tempo} BPM`;

            if (isPlaying) {
                stopMetronome();
                startMetronome();
            }
        }
    });
    </script>
</body>
</html>
